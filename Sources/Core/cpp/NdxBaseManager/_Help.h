/** \mainpage
<b>1. ОБЩИЕ СВЕДЕНИЯ</b>\n
Модуль NdxBaseManager используется для управления базами проиндексированных текстов. \n
Модуль реализован на языке программирования C++ с использованием инструментальных \n
средств из среды разработки Microsoft Visual Studio .Net, библиотеки STL. \n

<b>2. ФУНКЦИОНАЛЬНОЕ НАЗНАЧЕНИЕ</b>\n
Данный модуль решает следующие задачи:
\li	Управление базами проиндексированных текстов.
\li	Предоставление индексному процессору хранилищ базы проиндексированных текстов.

Функциональных ограничений нет.

<b>3. ОПИСАНИЕ ЛОГИЧЕСКОЙ СТРУКТУРЫ</b>\n
Данный модуль предоставляет следующие интерфейсы:

\li	IBaseManager интерфейс управления индексными базами данных
\li -> SetBasePath устанавливает путь к индексным базам
\li -> OpenBase открывает индексную базу
\li -> ClearBase очищает индексную базу
\li -> CloseBase зaкрывает индексную базу
\li -> BackUpBase осуществляет резервное копирование индексной базы
\n
\n

\li	INdxBaseManager интерфейс управления индексными базами индексного процессора NdxSE
\li -> GetCurrentSessionID возвращает идентификатор текущей сессии индексной базы,
 если у клиента не совпадает идентификатор сессии, необходимо обновить
 свои структуры, так как все хранилищя уже были созданы заново
\li -> ResetNdxBaseStructure сбрасывает структуру индексной базы
\li -> AddNdxBaseUnit добавляет хранилище к индексной базе
\li -> GetNdxBaseUnit возвращает хранилище индексной базы по имени
\li -> GetFirstNdxBaseUnit для обхода по коллекции юнитов базы возвращает первое в коллекции хранилище индексной базы
\li -> GetNextNdxBaseUnit возвращает следующее за текущим в коллекции хранилище индексной базы, 
при достижении конца или без вызова GetFirstNdxBaseUnit вернет NULL
\n
\n

<b>4. ИСПОЛЬЗУЕМЫЕ ТЕХНИЧЕСКИЕ СРЕДСТВА</b>\n
Используется стандартная техническая база, на которую может быть установлена ОС Windows.

<b>5. ВЫЗОВ И ЗАГРУЗКА</b>\n
\li Загрузка модуля происходит динамически при работе системы. 
\li Точки входа:
\li CreateInstance - точка входа для динамической загрузки интерфейсов.
\li DllMain - стандартная точка входа.

<b>6. ВХОДНЫЕ ДАННЫЕ</b>\n
\li идентификатор библиотеки(модуля).
\li	идентификатор класса.
\li	идентификатор интерфейса.
\li имя параметра
\li рабочий путь

<b>7. ВЫХОДНЫЕ ДАННЫЕ</b>\n
\li указатель на требуемый интерфейс
\li значение параметра

*/