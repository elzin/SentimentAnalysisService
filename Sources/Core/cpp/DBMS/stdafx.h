/**	\mainpage
1. ОБЩИЕ СВЕДЕНИЯ\n\n

Динамически линкуемый модуль DBMS.dll – система управления базами данных.\n
Таблицы данных являются дисковыми, двоичными, и строятся на основе алгоритмов хэширования.\n
Данный модуль функционирует в составе программного комплекса, дополнительных ограничений по наличию установленного программного обеспечения нет.\n
Модуль реализован на языке программирования C++ с использованием инструментальных средств из среды разработки Microsoft Visual Studio .Net, библиотеки STL.\n\n

2. ФУНКЦИОНАЛЬНОЕ НАЗНАЧЕНИЕ\n\n

Данный модуль решает следующие задачи:\n
	•   Создание структуры баз данных на диске.\n
	•   Доступ к элементам хранения данных (базам, таблицам).\n
	•   Заполнение таблиц данных (Допустимые типы данных: UINT32, BYTE[10], STD::STRING, STD::WSTRING, STD::VECTOR<BYTE>).\n
	•   Поиск данных в таблицах.\n\n

3. ОПИСАНИЕ ЛОГИЧЕСКОЙ СТРУКТУРЫ\n\n

	3.1. Данный модуль предоставляет следующие интерфейсы.\n\n

		•   DBMS::IDBManager (Конфигурирование всей структуры СУБД, доступ к базам данных).\n

			o   IsOpen\n
			Возвращает флаг "задействованности"\n
			o   Init\n
			Читает конфигурационный файл и создает внутренние и дисковае структуры, располагающиеся по указанному pFullPathToDbmsBases пути\n
			o   InitDynamic\n
			Создает внутреннюю (НЕ дисковую) структуру с единственной базой данных "DynamicDataBase" (индекс 0) -  для работы только с динамическими таблицами\n
			o   Switch\n
			Переключает текущий контекст DBMS на аналогичный по структуре. Вызывает метод Init(), в случае, когда он еще не вызывался\n
			o   MoveFirstDataBase\n
			Перемещает текущий_указатель на первую базу данных\n
			o   MoveNextDataBase\n
			Перемещает текущий_указатель на следующую базу данных\n
			o   MovePrevDataBase\n
			Перемещает текущий_указатель на предыдущую базу данных\n
			o   MoveToDataBase\n
			Перемещает текущий_указатель на указанную базу данных данных\n
			o   OpenDataBase\n
			Получает указатель на интерфейс базы данных в позиции текущего_указателя\n\n

		•   DBMS::IDataBase (Доступ к таблицам данных).\n

			o   IsOpen\n
			Возвращает флаг "задействованности"\n
			o   Clear\n
			Очищает/реинициализирует базу данных\n
			o   TryClear\n
			Очищает/реинициализирует базу данных при условии, что нет открытых таблиц\n
			o   Close\n
			Завершает работу с полученым ранее указателем на интерфейс базы данных\n
			o   MoveFirstDataTable\n
			Перемещает текущий_указатель на первую таблицу в базе\n
			o   MoveNextDataTable\n
			Перемещает текущий_указатель на следующую таблицу в базе\n
			o   MovePrevDataTable\n
			Перемещает текущий_указатель на предыдущую таблицу в базе\n
			o   MoveToDataTable\n
			Перемещает текущий_указатель на указанную таблицу в базе\n
			o   OpenDataTable\n
			Получает указатель на интерфейс таблицы в позиции текущего_указателя\n
			o   DynamicDataTableCreate\n
			Динамически создать таблицу данных по заданному пути и c заданными параменрами (и возможно открыть)\n
			o   DynamicDataTableOpen\n
			Открыть динамически созданную таблицу данных\n
			o   DynamicDataTableRefuse\n
			Отказаться от дальнейщей работы с динамически созданной таблицей данных\n\n

		•   DBMS::IDataTable (основной интерфейс: запись, поиск, просмотр и получение данных).\n

			o   IsOpen\n
			Возвращает флаг "задействованности"\n
			o   Clear\n
			Очищает/реинициализирует таблицу\n
			o   TryClear\n
			Очищает таблицу при условии, что счетчик числа открытий равен нулю\n
			o   SaveBackup\n
			Сохраняет промежуточную копию таблицы (в случае сбоя, в последствии, будет загружена копия)\n
			o   Close\n
			Завершает работу с полученым ранее указателем на интерфейс таблицы\n
			o   AddInit\n
			Инициализация процедуры добавления записей в таблицу\n
			o   Add\n
			Добавление записи в таблицу\n
			o   GetRecordsNumber\n
			Получение числа записей в таблице\n
			o   DeleteRecord\n
			Удаление записи\n
			o   GetDeletedRecordsNumber\n
			Получение числа удаленных (помеченых на удаление) записей в таблице\n
			o   Shrink\n
			Сжатие данных таблицы. Исключение записей помеченых на удаление\n
			o   FindInit\n
			Инициализация процедуры поиска\n
			o   FindInitEx\n
			Расширенная инициализация процедуры поиска\n
			o   Find\n
			Поиск и получение найденых записей таблицы (по значению ключа, указанного в FindInit\n
			o   FindOne\n
			Поиск и получение единственной записи таблицы (по значению ключа, указанного в FindInit())\n
			o   GetFoundIdx\n
			Получение индекса ранее найденой записи таблицы\n
			o   FindStart\n
			Гарантирует, что последующий вызов Find() будет работать с новым\n
			o   FindStop\n
			Гарантирует, что последующий вызов Find() будет работать с новым\n
			o   SpanFindInit\n
			Инициализация процедуры поиска в заданном интервале (включая границы)\n
			o   SpanFindInitEx\n
			Расширенная инициализация процедуры поиска в заданном интервале (включая границы)\n
			o   SpanFind\n
			Получение индексов записей таблицы (по значениям ключа, указанного в SpanFindInit())\n
			o   ScanInit\n
			Инициализация процедуры просмотра\n
			o   ScanInitEx\n
			Расширенная инициализация процедуры просмотра\n
			o   ScanStart\n
			Инициализация стартового индекса процедуры просмотра\n
			o   Scan\n
			Просмотр и получение записей таблицы (со значения индекса, заданного в ScanInit())\n
			o   ScanOne\n
			Получение единственной записеи таблицы\n
			o   GetScanedIdx\n
			Получение индекса ранее сосканированной записи таблицы\n
			o   ChangeInit\n
			Инициализация процедуры изменения\n
			o   FindOneAndChange\n
			Поиск и изменение единственной записи таблицы (по значению ключа, указанного в FindInit())\n
			o   ScanOneAndChange\n
			Изменение единственной записи таблицы\n
			o   SetUserValue\n
			Сохранить в данных таблицы пользовательское значение (одно из 16-и возможных)\n
			o   GetUserValue\n
			Получить из данных таблицы пользовательское значение (одно из 16-и возможных)\n\n

		Модуль имеет самостоятельную функциональность, но в системе  работает под
		управлением интерфейса SS::MANAGER::Interface::IManagerConnections.\n\n

	3.2. В данном модуле применяются следующие библиотеки/алгоритмы:\n
		•   STL (map, string).\n\n

	3.3. Структура модуля программы.\n
		•   DBMS  – namespace, представляющий основную функциональность модуля через интерфейсы:\n
			o   IDBManager\n
			o   IDataBase\n
			o   IDataTable\n\n

	3.4. В программном комплексе данный модуль управляется ManagerConnections.dll, функциональность данного модуля не использует другие программные компоненты.\n\n

4. ИСПОЛЬЗУЕМЫЕ ТЕХНИЧЕСКИЕ СРЕДСТВА\n\n
	Используется стандартная техническая база, на которую может быть установлена ОС Windows.\n\n

5. ВЫЗОВ И ЗАГРУЗКА\n\n
	5.1. Загрузка модуля осуществляется динамически через методы интерфейса CManagerConnections,
	который так же позволяет ибо через интерфейсы IConnection,  IManagerConnections, ISubConnection.\n\n

	5.2. Точек входа нет.\n\n

6. ВХОДНЫЕ ДАННЫЕ\n\n

	Нет.\n\n

7. ВЫХОДНЫЕ ДАННЫЕ\n\n

	Нет.\n\n
*/

/*! \namespace std
	*  \brief     общее пространство имен для объектов библиотеки STL
*/


/*! \namespace SS
	*  \brief     общее пространство имен для всех классов проекта SS
*/


/*! \namespace SS::Interface
	*  \brief     пространство имен для всех интерфейсов проекта SS
*/


/*! \namespace SS::Interface::Core
	*  \brief     пространство имен для всех интерфейсов ядра проекта SS
*/

/*! \namespace DBMS
	*  \brief     общее пространство имен для интерфейсов модулz DBMS.dll
*/



#pragma once

#define WIN32_LEAN_AND_MEAN      // Exclude rarely-used stuff from Windows headers

//	Windows Header Files

#include <windows.h>
#include <crtdbg.h>
#include <stdlib.h>
#include <malloc.h>
#include <tchar.h>

//	STL
#include <algorithm>
#include <unordered_map>
#include <string>
#include <vector>
#include <list>
#include <map>
#include <set>

#ifdef _UNICODE
	typedef std::wstring STLSTR;
#else
	typedef std::string  STLSTR;
#endif

#include "..\ASCInterface\defines.h"

USES_LOAD_MANAGER;


