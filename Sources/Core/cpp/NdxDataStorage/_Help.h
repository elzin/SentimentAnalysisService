/** \mainpage
<b>1. ОБЩИЕ СВЕДЕНИЯ</b>\n
Модуль NdxDataStorage используется для создания различных хранилищ данных базы проиндексирванных текстов. \n
Модуль реализован на языке программирования C++ с использованием инструментальных \n
средств из среды разработки Microsoft Visual Studio .Net, библиотеки STL. \n

<b>2. ФУНКЦИОНАЛЬНОЕ НАЗНАЧЕНИЕ</b>\n
Данный модуль решает следующие задачи:
\li	Создание различных хранилищ данных (Фабрика хранилищ данных базы проиндексирванных текстов).
Функциональных ограничений нет.

<b>3. ОПИСАНИЕ ЛОГИЧЕСКОЙ СТРУКТУРЫ</b>\n
Данный модуль предоставляет следующие интерфейсы:
\li	INdxDataUnit  интерфейс работы с базовым юнитом данных индексной базы
\li -> Create создает юнит данных 
\li -> Open открывает юнит данных в текущем режиме
\li -> Close закрывает юнит данных 
\li -> Flush сбрасывает юнит данных
\li -> Clear очищает  юнит данных 
\li -> GetDataUnitSize возвращает размер юнита данных 
\li -> IsOpen проверяет открыт ли юнит данных 
\li -> GetDataUnitName возвращает имя юнита данных 
\li -> GetDataUnitExt возвращает расширение юнита данных 
\n
\n

\li	INdxFile интерфейс работы с базовым индексным файлом
\li -> Read читает из файла по текущей позиции
\li -> Write пишет в файл по текущей позиции
\li -> Append добавляет к файлу
\li -> SeekPos изменяет текущую позицию в файле
\li -> TellPos возвращает текущую позицию в файле
\li -> Reserve резервирует место в файле
\li -> Rename переименовывает, перемещает файл
\li -> IsBad проверяет хендл файла на валидность
\li -> GetFileHandle возвращает хендл файла
\n
\n

\li	INdxCashedFile интерфейс работы с индексным файлом поддерживающим кэширование чтение-записи
\li -> InitCash инициализирует параметры кэша
\li -> Cashed кэширует файл
\li -> FlushFilledBuffers сбрасывает на диск заполненные буфера кэша файла
\n
\n

\li	INdxLevelStorage интерфейс работы с хранилищем уровня индексных данных
\li -> GetLevelInfo возвращает информацию об уровне
\li -> SeekPos перемещение по хранилищy индексных данных
\li -> TellPos возвращает позицию в хранилище индексных данных
\li -> StartRead начинает чтение по данной позиции
\li -> Read читает в буфер
\li -> StopRead заканчивает чтение, возвращает размер прочитанного
\li -> StartCompleteDataAppend начинает добавление неизменяемых данных
\li -> StartUnCompleteDataAppend начинает добавление изменяемых данных
\li -> Append добавление буфера данных
\li -> StopAppend заканчивает добавление, возвращает размер добавленного
\li -> GetAppendedUnCompleteDataSize возвращает размер добавленых изменяемых данных
\li -> SeekPosInAppendedUnCompleteData позиционирует в добавленых изменяемых данных
\li -> WriteInAppendedUnCompleteData пишет буфер данных в добавленые изменяемых данных
\li -> Delete удаление из коллекции файлов
\li -> UpdateData обновляет данные в хранилище индексных данных
\n
\n

\li	INdxTableStorage интерфейс работы с табличным хранилищем данных
\li -> AddField добавляет поле в таблицу
\li -> GetFieldsCollection возвращает коллекцию полей таблицы
\li -> InitFind инициализирует процесс поиска в базе
\li -> Find ищет в таблице несколько раз по неуникальным значениям пока поиск не закончится неудачей
\li -> FindOne ищет в таблице один раз по уникальному индексу
\li -> SpanFindInit инициализирует процесс интервального поиска в базе
\li -> SpanFind ищет в таблице записи удовлетворяющий SpanFindInit
\li -> GetFoundRecordIndex возвращает индекс записи таблицы найденой перед вызовом данного метода
\li -> DeleteRecord удаляет запись таблицы по индексу
\li -> InitScan инициализирует процесс сканирования таблицы
\li -> Scan возвращает очередную запись таблицы
\li -> ScanOne возвращает запись таблицы по индексу
\li -> InitAdd инициализирует процесса добавления данных в таблицу.
\li -> Add добавляет запись к таблице
\li -> InitModify инициализирует процесса изменения всех полей таблицы.
\li -> FindOneAndChange находит и изменяет запись в таблице
\n
\n

\li	INdxVectorStorage интерфейс работы с векторным хранилищем данных
\li -> MoveToAndGetDataSize смещается на начало данных по индексу, возвращает их размер
\li -> ReadWholeData читает все данные находящиеся по индексу
\li -> ReadDataChunk читает кусок данных находящихся по индексу
\li -> SeekInData смещает внутри данных находящихся по индексу, смещение считается от начала
\li -> AppendWholeData добавляет данные в хранилище, возвращает индекс, по которому будут находятся данные
\li -> AppendDataChunk добавляет пакет данных, запускает сценарий пакетного добавления
\li -> AppendDataChunkComplete завершает сценарий пакетного добавления, возвращает индекс, по которому будут находятся данные
\li -> Delete удаляет данные по индексу
\li -> IsDeleted проверяет удалены ли данные по индексу
\li -> GetIndexesNumber возвращает количество индексов
\n
\n

\li	INdxStorage интерфейс работы с хранилищем индексных данных
\li -> GetEntryPointsStorage возвращает хранилище точек входы в индекс
\li -> GetTextImagesStorage возвращает хранилище образов документов
\li -> AddLevelStorage добавляет хранилище уровня к индексу
\li -> GetLevelStorage возвращает хранилище уровня по номеру
\li -> GetLevelStoragesNumber возвращает число хранилищей уровня
\n
\n

\li	INdxStorageWithStatistic интерфейс работы с хранилищем индексных данных
\li -> GetIndexFrequencyStorage возвращает хранилище частот индексов
\li -> GetDocumentNormStorage возвращает хранилище норм документов индекса
\n
\n

\li	INdxDataStorageFactory
\li -> CreateNdxFile создает простой файл
\li -> CreateNdxCashedFile  создает файл поддерживающий кэширование чтение-записи
\li -> CreateNdxTableStorage создает табличное хранилище данных
\li -> CreateNdxVectorStorage создает векторное хранилище данных
\li -> CreateNdxStorage создает хранилище индексных данных
\li -> CreateNdxStorageWithStatistic создает хранилище индексных данных с поддержкой статистики
\n
\n

<b>4. ИСПОЛЬЗУЕМЫЕ ТЕХНИЧЕСКИЕ СРЕДСТВА</b>\n
Используется стандартная техническая база, на которую может быть установлена ОС Windows.

<b>5. ВЫЗОВ И ЗАГРУЗКА</b>\n
\li Загрузка модуля происходит динамически при работе системы. 
\li Точки входа:
\li CreateInstance - точка входа для динамической загрузки интерфейсов.
\li DllMain - стандартная точка входа.

<b>6. ВХОДНЫЕ ДАННЫЕ</b>\n
\li идентификатор библиотеки(модуля).
\li	идентификатор класса.
\li	идентификатор интерфейса.
\li имя параметра
\li рабочий путь

<b>7. ВЫХОДНЫЕ ДАННЫЕ</b>\n
\li указатель на требуемый интерфейс
\li значение параметра

*/