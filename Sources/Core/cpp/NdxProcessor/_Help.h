/** \mainpage
<b>1. ОБЩИЕ СВЕДЕНИЯ</b>\n
Модуль NdxProcessor используется для выполнения индексации (наполнения) и поиска в текущей базе проиндексированных текстов. \n
Модуль реализован на языке программирования C++ с использованием инструментальных \n
средств из среды разработки Microsoft Visual Studio .Net, библиотеки STL. \n

<b>2. ФУНКЦИОНАЛЬНОЕ НАЗНАЧЕНИЕ</b>\n
Данный модуль решает следующие задачи:
\li	Наполнение базы проиндексированных текстов.
\li	Поиск в базе проиндексированных текстов, по логическому выражению (запросу).
\li	Интервальный и прямой поиск полей документов находящихся в базе проиндексированных текстов.
\li	Получения бинарного отображения найденных частей документов находящихся в базе проиндексированных текстов.
\li	Получения характеристик проиндексированных документов находящихся в базе проиндексированных текстов.
Функциональных ограничений нет.

<b>3. ОПИСАНИЕ ЛОГИЧЕСКОЙ СТРУКТУРЫ</b>\n
Данный модуль предоставляет следующие интерфейсы:
\li	INdxSearchEngineFind интерфейс для выполнения поиска
\li -> StartFindSession запуск сессии поиска, получает контайнер результатов поиска где по окончании поисковой сессии будут лежать результаты
\li -> EndFindSession останов сессии поиска, записывает в контайнер поданный в StartFindSession результаты поиска 
\li -> Find поиск в индексном хранилище по запросу
\li -> Find поиск в таблице мета полей по фильтру
\n
\n

\li	INdxSearchEngineIndexation интерфейс для выполнения индексации
\li -> StartIndexationSession запуск сессии индексации коллекции документов
\li -> EndIndexationSession останов сессии индексации коллекции документов
\li -> StartDocumentIndexation запуск пакетной индексации документа
\li -> IndexateDocumentChunk индексация очередного куска документа
\li -> EndDocumentIndexation останов пакетной индексации документа
\n
\n

\li	INdxSearchEngineTextsInfo интерфейс для получения информации по проиндексированным текстам
\li -> GetTextsNumber возвращает количество текстов в базе
\li -> GetTextPath возвращает путь текста по индексу
\li -> GetTextInfo возвращает информацию по тексту
\li -> GetTextInfo возвращает информацию по тексту
\li -> GetTextInfo возвращает информацию по тексту
\li -> GetTextSize возвращает размер текста по индексу
\li -> DeleteText удаляет текст из базы
\li -> IsTextDeleted проверяет удален ли текст из базы
\n
\n

\li	INdxSearchEngineTextsPathsInfo интерфейс для получения информации по путям проиндексированных текстов
\li -> FillTextPathChunk заполняет в pTextPathChunk по смещению узла информацию по узлу
\li -> GetTextPathChunkChildsOffsets заполняет по pTextPathChunk смещения детей узла pChildsOffsetsCollection
\li -> GetTextPathChunkParentOffset заполняет по pTextPathChunk смещения родителя узла pParentOffset
\li -> DeleteTextPathChunk удаляет узел вместе с детьми
\li -> IsTextPathExist проверяет есть ли путь в дереве путей текстов
\li -> DeleteTextByPath удаляет текст по пути
\n
\n

\li	INdxSearchEngine работа с поисковым движком
\li -> INdxSearchEngineFind возвращает интерфейс для выполнения поиска
\li -> INdxSearchEngineIndexation возвращает интерфейс для выполнения индексации
\li -> INdxSearchEngineTextsInfo возвращает интерфейс для получения информации по проиндексированным текстам
\li -> INdxSearchEngineTextsPathsInfo возвращает интерфейс для получения информации по путям проиндексированных текстов
\n
\n

<b>4. ИСПОЛЬЗУЕМЫЕ ТЕХНИЧЕСКИЕ СРЕДСТВА</b>\n
Используется стандартная техническая база, на которую может быть установлена ОС Windows.

<b>5. ВЫЗОВ И ЗАГРУЗКА</b>\n
\li Загрузка модуля происходит динамически при работе системы. 
\li Точки входа:
\li CreateInstance - точка входа для динамической загрузки интерфейсов.
\li DllMain - стандартная точка входа.

<b>6. ВХОДНЫЕ ДАННЫЕ</b>\n
\li идентификатор библиотеки(модуля).
\li	идентификатор класса.
\li	идентификатор интерфейса.
\li имя параметра
\li рабочий путь

<b>7. ВЫХОДНЫЕ ДАННЫЕ</b>\n
\li указатель на требуемый интерфейс
\li значение параметра

*/