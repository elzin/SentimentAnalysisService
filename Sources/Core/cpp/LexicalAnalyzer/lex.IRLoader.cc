#define yyFlexLexer IRLoaderFlexLexer

/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header: /usr/local/cvsroot/tools/flex/flex.skl,v 1.1 2003/04/04 04:02:37 mark Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5



/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
#include <iostream>
#ifndef WIN32
#include <unistd.h>
#endif

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

#ifndef YY_CHAR_DEFINED
#define YY_CHAR_DEFINED 1
/* Define the YY_CHAR type. */
typedef char YY_CHAR;
#endif

/* Promotes a YY_CHAR to an unsigned integer for use as an array index. */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

#ifdef YY_REENTRANT
 /* Common macro definitions for conditionally compiling in a C reentrant
  * state parameter into the generated scanner code.
  *
  * YY_STATE_PARM[0] - used for calling routine requiring state
  * YY_STATE_ARG[0]  - used for defining parameter list for a routine
  *                    requiring yy_state
  * YY_STATE_ARG_PROTO
  *                  - used when YY_USE_PROTOS is FALSE, for defining
  *                    yy_state parameter type on routine requiring state
  * YY_STATE_PROTO[0]- used for declaring prototype for routines
  *                    requiring yy_state
  *
  * Note:
  * 	Those macros ending with an optional zero, 0, generate a comma
  *		if the zero is left off.
  *
  * Usage:
  *		
  *		-- Forward declarations
  *
  *		int routine1 YY_PROTO(( YY_STATE_PARM0 ));
  *		int routine2 YY_PROTO(( YY_STATE_PARM int n ));
  *		...
  *
  *		-- Routine Declarations
  *
  *		int routine1( YY_STATE_ARG0 )
  *		YY_STATE_ARG_PROTO
  *			{
  *			...
  *			}
  *
  *		#if YY_USE_PROTOS
  *		int routine2( YY_STATE_ARG int n )
  *		#else
  *		int routine2( YY_STATE_ARG n )
  *		YY_STATE_ARG_PROTO
  *		int n;
  *		#endif
  *			{
  *			...
  *			}
  *
  *		-- Calling these routines
  *			...
  *			routine1( YY_STATE_PARM0 );
  *			routine1( YY_STATE_PARM 10 );
  *		
  */

 #define YY_STATE_PARM0			yy_state
 #define YY_STATE_PARM			YY_STATE_PARM0,

 #ifdef YY_USE_PROTOS

  #define YY_STATE_ARG0			yy_flex_state	*yy_state
  #define YY_STATE_ARG			YY_STATE_ARG0,
  #define YY_STATE_ARG_PROTO

  #define YY_STATE_PROTO0		YY_STATE_ARG0
  #define YY_STATE_PROTO		YY_STATE_PROTO0,

 #else

  #define YY_STATE_ARG0			YY_STATE_PARM0
  #define YY_STATE_ARG			YY_STATE_ARG0,
  #define YY_STATE_ARG_PROTO	yy_flex_state	*yy_state;

  #define YY_STATE_PROTO0
  #define YY_STATE_PROTO

 #endif /* YY_USE_PROTOS */

#else
 /* NON-Reentrant interface; conditionally compile out the yy_state
  */
 #ifdef YY_USE_PROTOS
  #define YY_STATE_ARG0			void
  #define YY_STATE_PROTO0		void
 #else
  #define YY_STATE_ARG0
  #define YY_STATE_PROTO0
 #endif

 #define YY_STATE_PARM0
 #define YY_STATE_PARM

 #define YY_STATE_ARG
 #define YY_STATE_ARG_PROTO

 #define YY_STATE_PROTO

#endif /* YY_REENTRANT */

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( YY_STATE_PARM yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

#ifndef YY_REENTRANT
extern int yyleng;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( YY_STATE_PARM c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	std::istream* yy_input_file;

	YY_CHAR *yy_ch_buf;		/* input buffer */
	YY_CHAR *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_num_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};


/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer



#define yywrap(YY_STATE_PROTO0) 1
#define YY_SKIP_YYWRAP
#define yytext_ptr yytext
#define YY_INTERACTIVE

//#include <FlexLexer.h>

void yyrestart YY_PROTO(( YY_STATE_PROTO FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_STATE_PROTO YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( YY_STATE_PROTO0 ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( YY_STATE_PROTO FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_STATE_PROTO YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_STATE_PROTO YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_STATE_PROTO YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_STATE_PARM yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( YY_STATE_PROTO YY_CHAR *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( YY_STATE_PROTO yyconst YY_CHAR *yy_str ));

/* This is the old yy_scan_bytes function - renamed to avoid
 * confusion since a character may now be 1 or 2 bytes.
 */
YY_BUFFER_STATE yy_scan_chars YY_PROTO(( YY_STATE_PROTO yyconst YY_CHAR *chars, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( YY_STATE_PARM yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( YY_STATE_PARM yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)



/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = (YY_CHAR) '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 14
#define YY_END_OF_BUFFER 15
static yyconst short int yy_accept[105] =
    {   0,
        0,    0,   15,   13,   14,   13,   10,   13,   13,   13,
       13,    9,   13,   12,   11,    0,   10,    0,    7,    0,
        6,    6,    9,    0,    0,    0,    8,    0,    4,    7,
        0,    7,    0,    6,    5,    0,    3,    0,    0,    7,
        0,    7,    6,    6,    0,    0,    0,    7,    0,    7,
        0,    2,    0,    1,    7,    0,    7,    6,    6,    0,
        2,    0,    7,    0,    7,    0,    2,    2,    2,    7,
        0,    7,    6,    6,    0,    0,    7,    0,    7,    0,
        2,    2,    7,    0,    7,    6,    6,    7,    0,    6,
        6,    0,    6,    6,    0,    6,    6,    0,    6,    6,

        0,    6,    6,    0
    } ;

static yyconst int yy_ec[128] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    2,
        1,    1,    1,    1,    1,    1,    3,    4,    5,    6,
        1,    1,    1,    1,    7,    1,    1,    1,    8,    9,
        1,    1,   10,   11,   12,    1,    1,    1,   13,   14,
       15,   16,    1,   12,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[18] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1
    } ;

static yyconst short int yy_base[105] =
    {   0,
        0,    0,  211,  205,  204,   13,  204,  212,   14,   20,
       24,  197,   31,  201,  212,   45,  201,  198,   13,   20,
       54,   30,  193,   28,  191,   31,  212,  196,  190,   44,
       44,   59,   46,   56,   58,  189,  188,  186,  186,   64,
       63,   68,   73,   70,   68,   71,   73,   82,   81,   86,
       85,   88,   48,   39,   93,   92,   97,  102,   99,   97,
      100,  102,  111,  110,  115,  114,   29,  117,  119,  124,
      123,  128,  133,  130,  128,  131,  140,  139,  144,  143,
      212,   22,  212,  146,  151,  156,  153,   15,  155,  161,
      163,  163,  168,  170,  170,  175,  177,  177,  182,  184,

      184,   12,  212,  212
    } ;

static yyconst short int yy_def[105] =
    {   0,
      104,    1,  104,  104,  104,  104,  104,  104,  104,  104,
      104,  104,  104,  104,  104,  104,  104,  104,  104,  104,
      104,  104,  104,  104,  104,  104,  104,   16,  104,  104,
      104,  104,  104,  104,  104,  104,  104,  104,  104,  104,
      104,  104,  104,  104,  104,  104,  104,  104,  104,  104,
      104,  104,  104,  104,  104,  104,  104,  104,  104,  104,
      104,  104,  104,  104,  104,  104,  104,  104,  104,  104,
      104,  104,  104,  104,  104,  104,  104,  104,  104,  104,
      104,  104,  104,  104,  104,  104,  104,  104,  104,  104,
      104,  104,  104,  104,  104,  104,  104,  104,  104,  104,

      104,  104,  104,    0
    } ;

static yyconst short int yy_nxt[230] =
    {   0,
        4,    5,    6,    7,    8,    9,   10,   11,    4,   12,
        4,    8,    4,   13,   13,    4,   14,   15,   15,   30,
       31,   16,  103,   18,   15,   83,   19,   20,   15,   32,
       19,   62,   16,   21,   22,   15,   19,   35,   45,   16,
       24,   36,   37,   25,   39,   39,   26,   27,   47,   28,
       40,   41,   27,   42,   30,   43,   44,   62,   27,   27,
       19,   33,   19,   33,   34,   30,   31,   43,   44,   19,
       48,   49,   50,   40,   40,   41,   30,   51,   30,   30,
       51,   36,   52,   44,   53,   53,   39,   54,   55,   56,
       57,   48,   48,   49,   58,   59,   40,   60,   61,   63,

       64,   65,   55,   55,   56,   40,   66,   48,   40,   66,
       67,   52,   59,   68,   68,   53,   69,   70,   71,   72,
       63,   63,   64,   73,   74,   55,   75,   61,   76,   61,
       77,   78,   79,   70,   70,   71,   48,   80,   63,   48,
       80,   81,   81,   74,   82,   69,   83,   84,   85,   77,
       77,   78,   86,   87,   70,   88,   83,   83,   84,   55,
       89,   77,   55,   89,   90,   91,   87,   63,   92,   63,
       92,   91,   93,   94,   70,   95,   70,   95,   94,   96,
       97,   77,   98,   77,   98,   97,   99,  100,   83,  101,
       83,  101,  100,  102,  103,   47,   46,   45,   45,   18,

      104,   38,   23,   29,   17,   15,   23,   17,   15,   15,
      104,    3,  104,  104,  104,  104,  104,  104,  104,  104,
      104,  104,  104,  104,  104,  104,  104,  104,  104
    } ;

static yyconst short int yy_chk[230] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    6,    9,   19,
       19,    6,  102,    9,   10,   88,   10,   10,   11,   20,
       20,   82,   11,   11,   11,   13,   22,   22,   67,   13,
       13,   24,   24,   13,   26,   26,   13,   16,   54,   16,
       30,   30,   16,   31,   31,   33,   33,   53,   16,   16,
       21,   21,   34,   34,   21,   32,   32,   35,   35,   32,
       40,   40,   41,   41,   42,   42,   44,   44,   42,   43,
       43,   45,   45,   43,   46,   46,   47,   47,   48,   48,
       49,   49,   50,   50,   51,   51,   50,   52,   52,   55,

       55,   56,   56,   57,   57,   59,   59,   57,   58,   58,
       60,   60,   58,   61,   61,   62,   62,   63,   63,   64,
       64,   65,   65,   66,   66,   65,   68,   68,   69,   69,
       70,   70,   71,   71,   72,   72,   74,   74,   72,   73,
       73,   75,   75,   73,   76,   76,   77,   77,   78,   78,
       79,   79,   80,   80,   79,   84,   84,   85,   85,   87,
       87,   85,   86,   86,   89,   89,   86,   90,   90,   91,
       91,   90,   92,   92,   93,   93,   94,   94,   93,   95,
       95,   96,   96,   97,   97,   96,   98,   98,   99,   99,
      100,  100,   99,  101,  101,   39,   38,   37,   36,   29,

       28,   25,   23,   18,   17,   14,   12,    7,    5,    4,
        3,  104,  104,  104,  104,  104,  104,  104,  104,  104,
      104,  104,  104,  104,  104,  104,  104,  104,  104
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "IRLoader.flex"
#define INITIAL 0
#line 512 "lex.IRLoader.cc"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( YY_STATE_PROTO0 ));
#else
extern int yywrap YY_PROTO(( YY_STATE_PROTO0 ));
#endif
#endif


#ifdef YYLMAX
static void yy_flex_strncpy YY_PROTO(( YY_CHAR *, yyconst YY_CHAR *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst YY_CHAR * ));
#endif

#ifndef YY_NO_INPUT
#endif

#if YY_STACK_USED
#ifndef YY_REENTRANT
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#endif
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( YY_STATE_PROTO int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( YY_STATE_PROTO0 ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( YY_STATE_PROTO0 ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( (result = LexerInput( buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yyFlexLexer::yylex()
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register YY_CHAR *yy_cp, *yy_bp;
	register int yy_act;

#line 52 "IRLoader.flex"


	/* Prevent breaking sentence on {Point} */
#line 645 "lex.IRLoader.cc"

	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = &std::cin;

		if ( ! yyout )
			yyout = &std::cout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( YY_STATE_PARM yyin, YY_BUF_SIZE );

		yy_load_buffer_state( YY_STATE_PARM0 );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yy_last_accepting_state = yy_current_state;
				yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 105 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 212 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;


do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yy_hold_char;
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 55 "IRLoader.flex"
return accWord;
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 56 "IRLoader.flex"
return accWord;
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 57 "IRLoader.flex"
return accWord;
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 59 "IRLoader.flex"
return accWord;
	YY_BREAK
/* Detect abbreviations */
case 5:
YY_RULE_SETUP
#line 62 "IRLoader.flex"
return accAbbrev;
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 63 "IRLoader.flex"
return accAbbrev;
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 64 "IRLoader.flex"
return accAbbrev;
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 66 "IRLoader.flex"
return accBrokenWord;
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 68 "IRLoader.flex"
return accPoint;
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 69 "IRLoader.flex"
return accSentBreak;
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 71 "IRLoader.flex"
return accUnclosedSentence;
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 73 "IRLoader.flex"
return 0;
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 74 "IRLoader.flex"
return *yytext;
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 77 "IRLoader.flex"
ECHO;
	YY_BREAK
#line 799 "lex.IRLoader.cc"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_num_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( YY_STATE_PARM0 );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( YY_STATE_PARM yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( YY_STATE_PARM0 ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap( YY_STATE_PARM0 ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( YY_STATE_PARM0 );

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state( YY_STATE_PARM0 );

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */

yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
	{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 1;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = 0;

	yy_current_buffer = 0;

	//--------------------------//
	yy_hold_char = '\0';
	yy_n_chars = 0;
	yy_last_accepting_cpos = NULL;
	yy_last_accepting_state = (yy_state_type) 0;
	yy_state_ptr = NULL;
	yy_full_match = NULL;
	yy_full_state = NULL;
	yy_full_lp = 0;
	yy_lp = 0;
	//--------------------------//

#ifdef YY_USES_REJECT
	yy_state_buf = new yy_state_type[YY_BUF_SIZE + 2];
#else
	yy_state_buf = 0;
#endif
	}

yyFlexLexer::~yyFlexLexer()
	{
	delete yy_state_buf;
	yy_delete_buffer( yy_current_buffer );
	}

void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
	{
	if ( new_in )
		{
		yy_delete_buffer( yy_current_buffer );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE ) );
		}

	if ( new_out )
		yyout = new_out;
	}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( YY_CHAR* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( YY_CHAR* buf, int max_size )
#endif
	{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	(void) yyin->read(( char *)buf, sizeof( YY_CHAR ) );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read((unsigned char *)buf, max_size * sizeof( YY_CHAR ) );

	if ( yyin->bad() )
		return -1;
	else
		return ( yyin->gcount() / sizeof( YY_CHAR ) );
#endif
	}

void yyFlexLexer::LexerOutput( const YY_CHAR* buf, int size )
	{
	(void) yyout->write(( char *)buf, size * sizeof( YY_CHAR ) );
	}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

int yyFlexLexer::yy_get_next_buffer()
	{
	register YY_CHAR *dest = yy_current_buffer->yy_ch_buf;
	register YY_CHAR *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_num_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (YY_CHAR *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							( b->yy_buf_size + 2 ) *
							sizeof( YY_CHAR ) );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_num_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( YY_STATE_PARM yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

yy_state_type yyFlexLexer::yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register YY_CHAR *yy_cp;

	yy_current_state = yy_start;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 17);
		if ( yy_accept[yy_current_state] )
			{
			yy_last_accepting_state = yy_current_state;
			yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 105 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
	{
	register int yy_is_jam;
	register YY_CHAR *yy_cp = yy_c_buf_p;

	register YY_CHAR yy_c = 17;
	if ( yy_accept[yy_current_state] )
		{
		yy_last_accepting_state = yy_current_state;
		yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 105 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 104);

	return yy_is_jam ? 0 : yy_current_state;
	}


void yyFlexLexer::yyunput( int c, register YY_CHAR *yy_bp )
	{
	register YY_CHAR *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register YY_CHAR *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register YY_CHAR *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_num_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (YY_CHAR) c;


	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}


int yyFlexLexer::yyinput()
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = (YY_CHAR) '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer( YY_STATE_PARM0 ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( YY_STATE_PARM yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( YY_STATE_PARM0 ) )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput( YY_STATE_PARM0 );
#else
					return input( YY_STATE_PARM0 );
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = YY_SC_TO_UI(*yy_c_buf_p);
	*yy_c_buf_p = (YY_CHAR) '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;


	return c;
	}


void yyFlexLexer::yyrestart( std::istream* input_file )
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( YY_STATE_PARM yyin, YY_BUF_SIZE );

	yy_init_buffer( YY_STATE_PARM yy_current_buffer, input_file );
	yy_load_buffer_state( YY_STATE_PARM0 );
	}


void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_num_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state( YY_STATE_PARM0 );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


void yyFlexLexer::yy_load_buffer_state()
	{
	yy_n_chars = yy_current_buffer->yy_num_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (YY_CHAR *) yy_flex_alloc(
		( b->yy_buf_size + 2 ) * sizeof( YY_CHAR ) );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( YY_STATE_PARM b, file );

	return b;
	}


void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


extern "C" int isatty YY_PROTO(( int ));
void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )

	{
	yy_flush_buffer( YY_STATE_PARM b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

	b->yy_is_interactive = 0;
	}


void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
	{
	if ( ! b )
		return;

	b->yy_num_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state( YY_STATE_PARM0 );
	}


#ifndef YY_NO_SCAN_BUFFER
#endif


#ifndef YY_NO_SCAN_STRING
#endif


#ifndef YY_NO_SCAN_BYTES
#endif


#ifndef YY_NO_PUSH_STATE
void yyFlexLexer::yy_push_state( int new_state )
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
void yyFlexLexer::yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
int yyFlexLexer::yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif


void yyFlexLexer::LexerError( yyconst char msg[] )
	{
	std::cerr << msg << '\n';
	exit( YY_EXIT_FAILURE );
	}


/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = (YY_CHAR) '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


#ifdef YY_REENTRANT
yy_flex_state *yy_create_scanner_state YY_PROTO(( void ))
	{
	yy_flex_state *yy_state;
	int			   size		= sizeof( yy_flex_state );

	yy_state = (yy_flex_state *) yy_flex_alloc( size );

	if ( yy_state )
		{
		/* initialize structure to 0's
		 */
		memset( (char *) yy_state, 0, size );

		yy_state->init			= 1;
		yy_state->lineno		= 1;
		yy_state->flex_debug	= 0;

#ifdef YYLMAX
		/* yytext is to be an allocated array; allocate space for it */
		yy_state->text = (char *) yy_flex_alloc( YYLMAX );

		if ( yy_state->text == NULL )
			{
			yy_flex_free( yy_state );
			return( NULL );
			}
#endif

#ifdef YY_USES_REJECT
		yy_state->state_buf = yy_flex_alloc( YY_BUF_SIZE + 2 );
		if ( yy_state->state_buf == NULL ) 
			{
			yy_flex_free( yy_state->text );
			yy_flex_free( yy_state );
			yy_state = NULL;
			}
#endif /* YY_USES_REJECT */

		}

	return yy_state;
	}

#ifdef YY_USE_PROTOS
void yy_delete_scanner_state( yy_flex_state *yy_state )
#else
void yy_delete_scanner_state( yy_state )
yy_flex_state *yy_state;
#endif
	{
	if ( yy_state )
		{

#ifdef YYLMAX
		/* yytext is an allocated array; discard it's memory */
		if ( yy_state->text )
			yy_flex_free( (void *) yy_state->text );
#endif

#ifdef YY_USES_REJECT
		if ( yy_state->state_buf != NULL )
			yy_flex_free( (void *) yy_state->state_buf );
#endif /* YY_USES_REJECT */

		if ( yy_current_buffer )
			yy_delete_buffer( YY_STATE_PARM yy_current_buffer );

		yy_flex_free( (void *) yy_state );
		}
	}

#endif /*YY_REENTRANT */


/* Internal utility routines. */

#ifdef YYLMAX
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( YY_CHAR *s1, yyconst YY_CHAR *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
YY_CHAR *s1;
yyconst YY_CHAR *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst YY_CHAR *s )
#else
static int yy_flex_strlen( s )
yyconst YY_CHAR *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
#ifndef YY_REENTRANT
	yylex();
#else
	yy_flex_state	*yy_state;

	if ( ( yy_state = yy_create_scanner_state() ) != NULL )
		{
		yylex( yy_state );

		yy_delete_scanner_state( yy_state );
		}
#endif /* YY_REENTRANT */

	return 0;
	}
#endif



#line 77 "IRLoader.flex"

